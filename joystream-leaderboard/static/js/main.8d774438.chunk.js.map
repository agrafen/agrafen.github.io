{"version":3,"sources":["components/table.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultColumn","Filter","Header","column","id","filterTypes","fuzzyText","rows","filterValue","defaultPropGetter","Table","columns","data","fetchData","initSortBy","striped","total","getRowProps","showColumnHidding","useState","localPageSize","useTable","initialState","pageIndex","pageSize","sortBy","useFilters","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","allColumns","state","filters","className","cn","celled","map","headerGroup","Row","getHeaderGroupProps","headers","HeaderCell","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","Body","row","i","cells","cell","index","Cell","getCellProps","Menu","floated","pagination","Item","onClick","disabled","length","type","defaultValue","onChange","e","target","value","Number","style","width","App","rawData","setData","search","setSearch","useEffect","a","axios","get","result","scores","totalScores","useMemo","accessor","directScores","score","filter","d","memberHandle","includes","reduce","prev","curr","handleSearch","func","delay","timer","useCallback","args","clearTimeout","setTimeout","useDebounce","StrictMode","Input","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8d774438.chunk.js","sourcesContent":["import React, { useEffect, useState, PropsWithChildren, ReactElement } from 'react';\r\nimport {\r\n  HeaderProps,\r\n  useTable,\r\n  usePagination,\r\n  useSortBy,\r\n  useFilters,\r\n  useGlobalFilter,\r\n  FilterValue,\r\n  IdType,\r\n  Row,\r\n  TableOptions,\r\n  Column,\r\n} from 'react-table';\r\nimport { Icon, Label, Menu, Table as UiTable } from 'semantic-ui-react';\r\nimport cn from 'classnames';\r\n\r\ninterface Table<T extends object>/*  extends TableOptions<T>  */{\r\n  id: string;\r\n  data: Array<T>;\r\n  columns: Array<Column<T>>;\r\n  fetchData?: Function;\r\n  initSortBy?: Array<{\r\n    id: string;\r\n    desc: boolean;\r\n  }>;\r\n  striped?: boolean;\r\n  pageCount?: Number;\r\n  total?: number;\r\n  getRowProps?: Function;\r\n  showColumnHidding?: boolean;\r\n}\r\n\r\nlet firstLoad = true;\r\nconst handleGetList = (fetchData: Function, filter: any, data: any) => {\r\n  if (!fetchData) {\r\n    return;\r\n  }\r\n\r\n  if (filter.sort && filter.sort[0]) {\r\n    filter.sortBy = filter.sort[0].id;\r\n    filter.sortDesc = filter.sort[0].desc;\r\n    delete filter.sort;\r\n  }\r\n\r\n  const prms: { [index: string]: any } = {};\r\n  filter.filters.forEach((f: { id: string; value: any }) => {\r\n    prms[f.id] = f.value;\r\n  });\r\n\r\n  delete filter.filters;\r\n\r\n  if (firstLoad && data && data.length) {\r\n    firstLoad = false;\r\n  } else {\r\n    fetchData({\r\n      ...filter,\r\n      ...prms,\r\n    });\r\n    firstLoad = false;\r\n  }\r\n};\r\n\r\nconst DefaultHeader: React.FC<HeaderProps<any>> = ({ column }) => (\r\n  <>{column.id}</>\r\n);\r\n\r\nfunction DefaultColumnFilter<T extends object>() {\r\n  return null;\r\n}\r\n\r\nconst defaultColumn = {\r\n  Filter: DefaultColumnFilter,\r\n  Header: DefaultHeader,\r\n};\r\n\r\nexport function fuzzyTextFilter<T extends object>(\r\n  rows: Array<Row<T>>,\r\n  id: IdType<T>,\r\n  filterValue: FilterValue\r\n) {\r\n  return null;\r\n}\r\n\r\nconst filterTypes = {\r\n  fuzzyText: fuzzyTextFilter,\r\n};\r\n\r\nconst defaultPropGetter = () => ({});\r\n\r\nfunction Table<T extends object> ({\r\n  id,\r\n  columns,\r\n  data,\r\n  fetchData,\r\n  initSortBy = [],\r\n  striped = false,\r\n  total = 0,\r\n  getRowProps = defaultPropGetter,\r\n  showColumnHidding = false,\r\n}: Table<T>): ReactElement {\r\n  // const [showColumnHiddingBlock, setShowColumnHiddingBlock] = useState(false);\r\n\r\n  const [localPageSize, setLocalPageSize] = useState<number>(100);\r\n\r\n  // const controlledPageCount = React.useMemo(\r\n  //   () => {\r\n  //     console.log('controlledPageCount');\r\n      \r\n  //     return Math.ceil(total / localPageSize);\r\n  //   },\r\n  //   [total, localPageSize]\r\n  // );\r\n\r\n  // // console.log('table columns', columns);\r\n  // console.log('controlledPageCount', controlledPageCount);\r\n  \r\n\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page, // Instead of using 'rows', we'll use page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    allColumns,\r\n    state: { pageIndex, pageSize, sortBy, filters },\r\n  } = useTable<T>(\r\n    {\r\n      columns,\r\n      data,\r\n      initialState: {\r\n        pageIndex: 0,\r\n        pageSize: localPageSize,\r\n        // hiddenColumns: getUserSetting(`Table${id}-hiddenColumns`) || [],\r\n        sortBy: initSortBy\r\n      },\r\n      defaultColumn,\r\n      filterTypes, // TODO: !!!!!!!!!!!!!!!!\r\n      // manualPagination: !!fetchData,\r\n      // manualSortBy: !!fetchData,\r\n      // manualFilters: !!fetchData,\r\n      // autoResetPage: !fetchData,\r\n      // autoResetSortBy: !fetchData,\r\n      // pageCount: !!fetchData ? controlledPageCount : undefined,\r\n    },\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  // console.log('pageIndex', pageIndex);\r\n\r\n  // useEffect(() => {\r\n  //   if (fetchData) {\r\n  //     handleGetList(\r\n  //       fetchData,\r\n  //       {\r\n  //         limit: pageSize,\r\n  //         offset: pageIndex * pageSize,\r\n  //         sort: sortBy,\r\n  //         filters,\r\n  //       },\r\n  //       data\r\n  //     );\r\n  //   }\r\n  // }, [fetchData, pageSize, pageIndex, sortBy, filters]);\r\n\r\n  // useEffect(() => {\r\n  //   // setUserSetting(`Table${id}-pageSize`, pageSize);\r\n  //   setLocalPageSize(pageSize);\r\n  // }, [pageSize]);\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      <div>\r\n        <UiTable\r\n          {...getTableProps()}\r\n          className={cn('Table', {\r\n            'Table': striped,\r\n          })}\r\n          striped\r\n        >\r\n          <UiTable.Header celled>\r\n            {headerGroups.map((headerGroup: any) => (\r\n              <UiTable.Row\r\n                {...headerGroup.getHeaderGroupProps()}\r\n                // className={cn('TableMod-headRow')}\r\n              >\r\n                {headerGroup.headers.map((column: any) => (\r\n                  <UiTable.HeaderCell\r\n                    // {...column.getHeaderProps()}\r\n                    {...column.getHeaderProps()}\r\n                    // className={cn('TableMod-headCol')}\r\n                  >\r\n                    <div {...column.getSortByToggleProps()}>\r\n                      {column.render('Header')}\r\n                      <span>\r\n                        {column.isSorted\r\n                          ? column.isSortedDesc\r\n                            ? ' 🔽'\r\n                            : ' 🔼'\r\n                          : ''}\r\n                      </span>\r\n                    </div>\r\n                    <div>\r\n                      {column.canFilter ? column.render('Filter') : null}\r\n                    </div>\r\n                  </UiTable.HeaderCell>\r\n                ))}\r\n              </UiTable.Row>\r\n            ))}\r\n          </UiTable.Header>\r\n          <UiTable.Body {...getTableBodyProps()}>\r\n            {page.map((row: any, i: any) => {\r\n              prepareRow(row);\r\n              return (\r\n                <UiTable.Row {...row.getRowProps(getRowProps(row))}>\r\n                  {row.cells.map((cell: any) => {\r\n                    if (cell.column.id === \"index\") {\r\n                      return <td>{row.index + 1}</td>;\r\n                    }\r\n\r\n                    return (\r\n                      <UiTable.Cell\r\n                        {...cell.getCellProps()}\r\n                        // className={cn('TableMod-col', 'TableMod-col--td')}\r\n                      >\r\n                        {cell.render('Cell')}\r\n                      </UiTable.Cell>\r\n                    );\r\n                  })}\r\n                </UiTable.Row>\r\n              );\r\n            })}\r\n          </UiTable.Body>\r\n        </UiTable>\r\n      </div>\r\n      {/* \r\n        Pagination can be built however you'd like. \r\n        This is just a very basic UI implementation:\r\n      */}\r\n      <Menu floated='right' pagination>\r\n        <Menu.Item onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </Menu.Item>{' '}\r\n        <Menu.Item onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </Menu.Item>{' '}\r\n        <Menu.Item onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </Menu.Item>{' '}\r\n        <Menu.Item onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </Menu.Item>{' '}\r\n        <Menu.Item>\r\n          Page&nbsp;\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{' '}\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          Go to page:&nbsp;&nbsp;\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={(e) => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n              gotoPage(page);\r\n            }}\r\n            style={{ width: '50px' }}\r\n          />\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <select\r\n            value={pageSize}\r\n            onChange={(e) => {\r\n              setPageSize(Number(e.target.value));\r\n            }}\r\n          >\r\n            {[100, 1000].map((pageSize) => (\r\n              <option key={pageSize} value={pageSize}>\r\n                Show {pageSize}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </Menu.Item>\r\n      </Menu>\r\n    </>\r\n  );\r\n}\r\nexport default Table;\r\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport axios from 'axios';\nimport { LowSync, LocalStorage } from 'lowdb';\nimport { Input } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Column } from 'react-table';\n\nimport Table from './components/table';\n\nimport logo from './logo.svg';\nimport './App.css';\n\n// https://raw.githubusercontent.com/Joystream/founding-members/main/data/fm-info.json\n\n// interface Column {\n//   Header: string;\n//   accessor: string;\n// }\n\ninterface Member {\n  memberHandle: string;\n  directScores: number[];\n  memberId: number;\n  totalDirectScore: number;\n  totalReferralScore: number;\n  totalScore: number;\n}\n\nfunction useDebounce(func: Function, delay: number = 500) {\n  let timer: any = null;\n  // console.log('debounce', func);\n  \n  const debounce = useCallback((...args: any) => {\n    clearTimeout(timer);\n\n    timer = setTimeout(() => func(...args), delay);\n  }, [func]);\n\n  return debounce;\n}\n\nexport default function App() {\n  const [rawData, setData] = useState<Member[]>([]);\n  const [search, setSearch] = useState<string | null>(null);\n  // console.log('search', search);\n\n  useEffect(() => {\n    async function fetchData() {\n      const result: any = await axios.get(\n        'https://raw.githubusercontent.com/Joystream/founding-members/main/data/fm-info.json'\n      );\n      // console.log(result);\n      setData(result.data.scores.totalScores);\n    }\n\n    fetchData();\n  }, []);\n\n  const columns: Column[] = useMemo(\n    () => [\n      {\n        Header: '#',\n        accessor: 'index',\n      },\n      {\n        Header: 'ID',\n        accessor: 'memberId',\n      },\n      {\n        Header: 'Member handle',\n        accessor: 'memberHandle',\n      },\n      {\n        Header: 'Direct Score',\n        accessor: 'totalDirectScore',\n      },\n      {\n        Header: 'Referral Score',\n        accessor: 'totalReferralScore',\n      },\n      {\n        Header: 'Total Score',\n        accessor: 'totalScore',\n      },\n      ...(rawData[0]?.directScores.map((score, index) => ({\n        Header: `Period ${index}`,\n        accessor: `period_${index}`,\n      })) || []),\n    ],\n    [rawData]\n  );\n\n  const data = useMemo(\n    () =>\n      rawData\n        ? rawData\n            .filter((d: Member) =>\n              search ? d.memberHandle.includes(search) : true\n            )\n            .map((d: Member) => ({\n              ...d,\n              ...d.directScores.reduce(\n                (prev, curr, index) => ({\n                  ...prev,\n                  [`period_${index}`]: curr,\n                }),\n                {}\n              ),\n            }))\n        : [],\n    [rawData, search]\n  );\n\n  const handleSearch = useDebounce((e: any, data: any) => setSearch(data.value));\n\n  return (\n    <React.StrictMode>\n      <Input placeholder=\"Search handle...\" onChange={handleSearch} />\n      <Table id=\"TableTradesHistory\" columns={columns} data={data} />\n    </React.StrictMode>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}